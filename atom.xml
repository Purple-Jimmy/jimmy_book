<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[jimmy_codebook]]></title>
  <link href="https://purple-jimmy.github.io/jimmy_book/atom.xml" rel="self"/>
  <link href="https://purple-jimmy.github.io/jimmy_book/"/>
  <updated>2018-09-06T23:37:27+08:00</updated>
  <id>https://purple-jimmy.github.io/jimmy_book/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[关键字]]></title>
    <link href="https://purple-jimmy.github.io/jimmy_book/%E5%85%B3%E9%94%AE%E5%AD%97.html"/>
    <updated>2018-09-09T21:01:30+08:00</updated>
    <id>https://purple-jimmy.github.io/jimmy_book/%E5%85%B3%E9%94%AE%E5%AD%97.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">this 关键字</h2>

<ul>
<li>修饰属性、方法、构造器</li>
<li>this理解为当前对象或正在创建的对象</li>
</ul>

<h2 id="toc_1">super 关键字</h2>

<ul>
<li>可以访问父类属性，调用父类方法，在子类构造方法中调用父类构造器</li>
<li>super追溯不仅限于直接父类</li>
</ul>

<h2 id="toc_2">static 关键字</h2>

<h2 id="toc_3">final 关键字</h2>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[API之mapping]]></title>
    <link href="https://purple-jimmy.github.io/jimmy_book/15364136255027.html"/>
    <updated>2018-09-08T21:33:45+08:00</updated>
    <id>https://purple-jimmy.github.io/jimmy_book/15364136255027.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">动态映射</h2>

<h2 id="toc_1">静态映射</h2>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[routing 路由机制]]></title>
    <link href="https://purple-jimmy.github.io/jimmy_book/routing%E8%B7%AF%E7%94%B1%E6%9C%BA%E5%88%B6.html"/>
    <updated>2018-09-08T21:32:49+08:00</updated>
    <id>https://purple-jimmy.github.io/jimmy_book/routing%E8%B7%AF%E7%94%B1%E6%9C%BA%E5%88%B6.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[API之文档]]></title>
    <link href="https://purple-jimmy.github.io/jimmy_book/API%E4%B9%8B%E6%96%87%E6%A1%A3.html"/>
    <updated>2018-09-08T21:31:11+08:00</updated>
    <id>https://purple-jimmy.github.io/jimmy_book/API%E4%B9%8B%E6%96%87%E6%A1%A3.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">查询</h2>

<h2 id="toc_1">添加</h2>

<h2 id="toc_2">更新</h2>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[API之索引]]></title>
    <link href="https://purple-jimmy.github.io/jimmy_book/API%E4%B9%8B%E7%B4%A2%E5%BC%95.html"/>
    <updated>2018-09-08T21:28:28+08:00</updated>
    <id>https://purple-jimmy.github.io/jimmy_book/API%E4%B9%8B%E7%B4%A2%E5%BC%95.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">查询</h2>

<h2 id="toc_1">创建</h2>

<p>索引名不能包含大写字母</p>

<h2 id="toc_2">更新</h2>

<h2 id="toc_3">删除</h2>

<h2 id="toc_4">打开</h2>

<h2 id="toc_5">关闭</h2>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基本概念]]></title>
    <link href="https://purple-jimmy.github.io/jimmy_book/%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5.html"/>
    <updated>2018-09-08T21:16:15+08:00</updated>
    <id>https://purple-jimmy.github.io/jimmy_book/%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">index 索引</h2>

<p>ElasticSearch存放具体数据的地方，是一类具有相似特征的文档的集合</p>

<h2 id="toc_1">type 类型</h2>

<p>一个类型是索引的一个逻辑上的分类，通常具有一组相同字段的文档组成</p>

<h2 id="toc_2">document 文档</h2>

<p>文档是ElasticSearch可被索引的基础逻辑单元，相当于关系数据库中数据表的一行数据。ElasticSearch的文档具有JSON格式，由多个字段组成，字段相当于关系数据库中列的概念</p>

<h2 id="toc_3">shard 分片</h2>

<p>当数据量较大时，索引的存储空间需求超出单个节点磁盘容量的限制，或者出现单个节点处理速度较慢。为了解决这些问题，ElasticSearch将索引中的数据进行切分成多个分片（shard），每个分片存储这个索引的一部分数据，分布在不同节点上。当需要查询索引时，ElasticSearch将查询发送到每个相关分片，之后将查询结果合并，这个过程对ElasticSearch应用来说是透明的，用户感知不到分片的存在。 <br/>
一个索引的分片一定指定，不再修改</p>

<h2 id="toc_4">replication 副本</h2>

<h2 id="toc_5">其实，分片全称是主分片，简称为分片。主分片是相对于副本来说的，副本是对主分片的一个或多个复制版本（或称拷贝），这些复制版本（拷贝）可以称为复制分片，可以直接称之为副本。当主分片丢失时，集群可以将一个副本升级为新的主分片</h2>

<h1 id="toc_6">与关系型数据库对比</h1>

<table>
<thead>
<tr>
<th>ElasticSearch</th>
<th>RDBMS</th>
</tr>
</thead>

<tbody>
<tr>
<td>索引（index）</td>
<td>数据库（database）</td>
</tr>
<tr>
<td>类型（type）</td>
<td>表（table）</td>
</tr>
<tr>
<td>文档（document</td>
<td>行（row）</td>
</tr>
<tr>
<td>字段（field）</td>
<td>列（column）</td>
</tr>
<tr>
<td>映射（mapping）</td>
<td>表结构（schema）</td>
</tr>
<tr>
<td>全文索引</td>
<td>索引</td>
</tr>
<tr>
<td>查询DSL</td>
<td>SQL</td>
</tr>
</tbody>
</table>

<hr/>

<h2 id="toc_7">字段类型</h2>

<blockquote>
<p>核心类型</p>
</blockquote>

<table>
<thead>
<tr>
<th>类型名称</th>
<th>类型表示</th>
<th>类型描述</th>
</tr>
</thead>

<tbody>
<tr>
<td>字符串类型</td>
<td>keyword,text</td>
<td>keyword类型的字段只能通过精确值搜索到。text类型的字段不用于排序，很少用于聚合。</td>
</tr>
<tr>
<td>整数类型</td>
<td>integer,long,short,byte</td>
<td></td>
</tr>
<tr>
<td>浮点类型</td>
<td>double,float,half_float,scaled_float</td>
<td></td>
</tr>
<tr>
<td>逻辑类型</td>
<td>boolean</td>
<td></td>
</tr>
<tr>
<td>日期类型</td>
<td>date</td>
<td></td>
</tr>
<tr>
<td>范围类型</td>
<td>range</td>
<td></td>
</tr>
<tr>
<td>二进制类型</td>
<td>binary</td>
<td></td>
</tr>
</tbody>
</table>

<blockquote>
<p>复合类型</p>
</blockquote>

<table>
<thead>
<tr>
<th>类型名称</th>
<th>类型表示</th>
<th>类型描述</th>
</tr>
</thead>

<tbody>
<tr>
<td>数组类型</td>
<td>array</td>
<td></td>
</tr>
<tr>
<td>对象类型</td>
<td>object</td>
<td></td>
</tr>
<tr>
<td>嵌套类型</td>
<td>nested</td>
<td></td>
</tr>
</tbody>
</table>

<blockquote>
<p>地理类型</p>
</blockquote>

<table>
<thead>
<tr>
<th>类型名称</th>
<th>类型表示</th>
<th>类型描述</th>
</tr>
</thead>

<tbody>
<tr>
<td>地理坐标类型</td>
<td>geo_point</td>
<td></td>
</tr>
<tr>
<td>地理地图</td>
<td>geo_shape</td>
<td></td>
</tr>
</tbody>
</table>

<blockquote>
<p>特殊类型</p>
</blockquote>

<table>
<thead>
<tr>
<th>类型名称</th>
<th>类型表示</th>
<th>类型描述</th>
</tr>
</thead>

<tbody>
<tr>
<td>IP类型</td>
<td>ip</td>
<td></td>
</tr>
<tr>
<td>范围类型</td>
<td>completion</td>
<td></td>
</tr>
<tr>
<td>令牌计数类型</td>
<td>token_count</td>
<td></td>
</tr>
<tr>
<td>附件类型</td>
<td>attachment</td>
<td></td>
</tr>
<tr>
<td>抽取类型</td>
<td>percolator</td>
<td></td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面向对象三大特性]]></title>
    <link href="https://purple-jimmy.github.io/jimmy_book/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7.html"/>
    <updated>2018-09-01T23:08:02+08:00</updated>
    <id>https://purple-jimmy.github.io/jimmy_book/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">封装</h2>

<p>属性私有化，方法公开化</p>

<h2 id="toc_1">继承</h2>

<h2 id="toc_2">多态</h2>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[elk配置文件]]></title>
    <link href="https://purple-jimmy.github.io/jimmy_book/elk%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.html"/>
    <updated>2018-09-01T22:26:37+08:00</updated>
    <id>https://purple-jimmy.github.io/jimmy_book/elk%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">elasticsearch.yml</h2>

<pre><code class="language-text"># --------------- Cluster ----------------------
#es 集群名称
cluster.name: es-cluster        

#当前节点名称
node.name: es-mater01           

#配置角色为：主节点和数据节点
node.master: true
node.data: true

#配置数据路径和日志路径
path.data: /data/elastic/data
path.logs: /data/elastic/log

#开启内存锁定
bootstrap.memory_lock: true
bootstrap.system_call_filter: false
# ---------------- Network ---------------------
#节点间通讯IP，设置为0.0.0.0兼顾内网节点间通讯
network.bind_host: 0.0.0.0

#设置9200通讯IP，一般设置为外网IP
network.publish_host: 39.104.186.15

#设置HTTP通讯端口
http.port: 9200

#设置HTTP开启状态
http.enabled: true

#设置运行跨域访问
http.cors.enabled: true
http.cors.allow-origin: &quot;*&quot;
http.max_content_length: 500mb

# -------------- Discovery ----------------------
#设置zen发现范围，此处可用换为主机名：[&quot;es-master01&quot;, &quot;es-master02&quot;, &quot;es-data01&quot;]
discovery.zen.ping.unicast.hosts: [&quot;172.16.14.85&quot;, &quot;172.16.14.86&quot;, &quot;172.16.14.87&quot;]

#discovery.zen.ping.multicast.enabled: false

discovery.zen.no_master_block: write
discovery.zen.fd.ping_timeout: 10s

#一个节点需要看到的具有master节点资格的最小数量,然后才能在集群中做操作.默认1.一般为：(master_node_count+1)/2
discovery.zen.minimum_master_nodes: 2

# --------------- Gateway --------------------
#设置在有2个节点后进行数据恢复
gateway.recover_after_nodes: 2
gateway.expected_nodes: 3
gateway.recover_after_time: 1m

#
# --------------- Various ----------------------
#禁止通配符模式删除索引
action.destructive_requires_name: true
#indices.cluster.send_refresh_mapping: false

indices.recovery.max_bytes_per_sec: 200mb
indices.memory.index_buffer_size: 20%

#script.inline: true
#script.indexed: true

#关闭xpack的安全校验
xpack.security.enabled: false
</code></pre>

<hr/>

<h2 id="toc_1">kibana.yml</h2>

<pre><code class="language-text">#
server.port: 5601
#设置可以远程访问
server.host: &quot;0.0.0.0&quot;
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[elasticsearch 性能调优]]></title>
    <link href="https://purple-jimmy.github.io/jimmy_book/elasticsearch%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98.html"/>
    <updated>2018-09-01T22:26:02+08:00</updated>
    <id>https://purple-jimmy.github.io/jimmy_book/elasticsearch%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[elasticsearch 集群安装]]></title>
    <link href="https://purple-jimmy.github.io/jimmy_book/elasticsearch%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85.html"/>
    <updated>2018-09-01T22:25:01+08:00</updated>
    <id>https://purple-jimmy.github.io/jimmy_book/elasticsearch%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85.html</id>
    <content type="html"><![CDATA[
<p><a href="https://juejin.im/post/5b44b585e51d45191716e63c">https://juejin.im/post/5b44b585e51d45191716e63c</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[elk 安装 (rpm方式)]]></title>
    <link href="https://purple-jimmy.github.io/jimmy_book/elk%E5%AE%89%E8%A3%85(rpm%E6%96%B9%E5%BC%8F).html"/>
    <updated>2018-09-01T22:02:24+08:00</updated>
    <id>https://purple-jimmy.github.io/jimmy_book/elk%E5%AE%89%E8%A3%85(rpm%E6%96%B9%E5%BC%8F).html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">elasticsearch 安装</h2>

<h3 id="toc_1">上传rpm包到路径/usr/search</h3>

<h3 id="toc_2">解压</h3>

<pre><code class="language-text">rpm -ivh elasticsearch-6.4.0.rpm
</code></pre>

<ul>
<li>安装路径 /usr/share/elasticsearch </li>
<li>配置文件路径 /etc/elasticsearch/</li>
</ul>

<h3 id="toc_3">启动服务</h3>

<pre><code class="language-text">service elasticsearch start  
或者命令  
sudo chkconfig --add elasticsearch  
sudo -i service elasticsearch start  
sudo -i service elasticsearch stop   
sudo -i service elasticsearch status 
</code></pre>

<h3 id="toc_4">测试是否安装成功</h3>

<pre><code class="language-text">curl http://localhost:9200/
</code></pre>

<hr/>

<h2 id="toc_5">kibana 安装</h2>

<h3 id="toc_6">上传rpm包到路径/usr/search</h3>

<h3 id="toc_7">解压</h3>

<pre><code class="language-text">rpm -ivh kibana-6.4.0-x86_64.rpm
</code></pre>

<ul>
<li>安装路径 /usr/share/kibana</li>
<li>配置文件路径 /etc/kibana/</li>
</ul>

<hr/>

<h2 id="toc_8">logstash 安装</h2>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[方法的参数传递]]></title>
    <link href="https://purple-jimmy.github.io/jimmy_book/%E6%96%B9%E6%B3%95%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92.html"/>
    <updated>2018-08-26T22:49:25+08:00</updated>
    <id>https://purple-jimmy.github.io/jimmy_book/%E6%96%B9%E6%B3%95%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">在java中方法的参数传递只有一种方式:<em>值传递</em>,即将实际参数值的副本传入方法内，而参数本身不受影响.</h2>

<ul>
<li>形参是基本数据类型:将实参的值传递给形参的基本数据类型变量</li>
<li>形参是引用数据类型:将实参的引用类型变量的值(对应对象的堆空间地址值)传递给形参的引用类型变量</li>
</ul>

<h3 id="toc_1">局部变量存在于栈空间</h3>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ClassLoader 类加载器]]></title>
    <link href="https://purple-jimmy.github.io/jimmy_book/classLoader%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.html"/>
    <updated>2018-08-26T20:59:18+08:00</updated>
    <id>https://purple-jimmy.github.io/jimmy_book/classLoader%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.html</id>
    <content type="html"><![CDATA[
<p><a href="https://blog.csdn.net/briblue/article/details/54973413">https://blog.csdn.net/briblue/article/details/54973413</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[代理模式]]></title>
    <link href="https://purple-jimmy.github.io/jimmy_book/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html"/>
    <updated>2018-08-26T14:13:51+08:00</updated>
    <id>https://purple-jimmy.github.io/jimmy_book/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html</id>
    <content type="html"><![CDATA[
<p><img src="media/15352640315767/15352640761696.png" alt=""/></p>

<h3 id="toc_0">静态代理 代理类需要自己编写代码写成</h3>

<blockquote>
<p>举例:电影院看电影,电影开始前买爆米花,广告播放</p>
</blockquote>

<p>这里电影院就是受电影公司委托播放电影的代理对象</p>

<p><u>代理模式可以在不修改被代理对象的基础上，通过扩展代理类，进行一些功能的附加与增强。值得注意的是，代理类和被代理类应该共同实现一个接口，或者是共同继承某个类</u></p>

<h3 id="toc_1">动态代理 代理类通过 Proxy.newInstance() 方法生成</h3>

<p><strong><em><u>总结：不管是静态代理还是动态代理，代理与被代理者都要实现两样接口，它们的实质是面向接口编程。</u></em></strong></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[annotation 注解]]></title>
    <link href="https://purple-jimmy.github.io/jimmy_book/annotation%E6%B3%A8%E8%A7%A3.html"/>
    <updated>2018-08-26T11:20:29+08:00</updated>
    <id>https://purple-jimmy.github.io/jimmy_book/annotation%E6%B3%A8%E8%A7%A3.html</id>
    <content type="html"><![CDATA[
<p>注解主要给编译器及工具类型的软件用的</p>

<h3 id="toc_0">元注解 注解的注解</h3>

<blockquote>
<p>@Retention 指定注解的存活周期</p>
</blockquote>

<ul>
<li>RetentionPolicy.SOURCE 注解只在源码阶段保留，在编译器进行编译时它将被丢弃忽视。 </li>
<li>RetentionPolicy.CLASS 注解只被保留到编译进行的时候，它并不会被加载到 JVM 中。 </li>
<li>RetentionPolicy.RUNTIME 注解可以保留到程序运行的时候，它会被加载进入到 JVM 中</li>
</ul>

<blockquote>
<p>@Documented 将注解中的元素包含到 Javadoc 中去</p>

<p>@Target 指定注解运用的地方</p>
</blockquote>

<ul>
<li>ElementType.ANNOTATION_TYPE 可以给一个注解进行注解</li>
<li>ElementType.CONSTRUCTOR 可以给构造方法进行注解</li>
<li>ElementType.FIELD 可以给属性进行注解</li>
<li>ElementType.LOCAL_VARIABLE 可以给局部变量进行注解</li>
<li>ElementType.METHOD 可以给方法进行注解</li>
<li>ElementType.PACKAGE 可以给一个包进行注解</li>
<li>ElementType.PARAMETER 可以给一个方法内的参数进行注解</li>
<li>ElementType.TYPE 可以给一个类型进行注解，比如类、接口、枚举</li>
</ul>

<blockquote>
<p>@Inherited 继承</p>
</blockquote>

<pre><code class="language-text">果一个超类被 @Inherited 注解过的注解进行注解的话，那么如果它的子类没有被任何注解应用的话，那么这个子类就继承了超类的注解
</code></pre>

<blockquote>
<p>@Repeatable 可重复</p>
</blockquote>

<h3 id="toc_1">注解的语法</h3>

<p>@interface关键字定义</p>

<pre><code class="language-text">public @interface TestAnnotation {
}
</code></pre>

<h3 id="toc_2">注解的属性</h3>

<ul>
<li>释义</li>
</ul>

<pre><code class="language-text">注解的属性也叫做成员变量，注解只有成员变量，没有方法。注解的成员变量在注解的定义中以“无形参的方法”形式来声明，其方法名定义了该成员变量的名字，其返回值定义了该成员变量的类型。
</code></pre>

<ul>
<li>可用定义类型</li>
</ul>

<pre><code class="language-text">在注解中定义属性时它的类型必须是 8 种基本数据类型外加 类、接口、注解及它们的数组。
注解中属性可以有默认值，默认值需要用 default 关键值指定
</code></pre>

<h3 id="toc_3">注解的提取  反射</h3>

<ol>
<li>isAnnotationPresent() 是否存在指定注解</li>
<li>getAnnotation() 获取指定注解</li>
<li>getAnnotation() 获取所有注解</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zipkin 链路追踪]]></title>
    <link href="https://purple-jimmy.github.io/jimmy_book/zipkin%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA.html"/>
    <updated>2018-08-26T10:46:10+08:00</updated>
    <id>https://purple-jimmy.github.io/jimmy_book/zipkin%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA.html</id>
    <content type="html"><![CDATA[
<h4 id="toc_0">术语概念</h4>

<p>Span：基本工作单元，例如，在一个新建的span中发送一个RPC等同于发送一个回应请求给RPC，span通过一个64位ID唯一标识，trace以另一个64位ID表示，span还有其他数据信息，比如摘要、时间戳事件、关键值注释(tags)、span的ID、以及进度ID(通常是IP地址) <br/>
span在不断的启动和停止，同时记录了时间信息，当你创建了一个span，你必须在未来的某个时刻停止它。<br/>
Trace：一系列spans组成的一个树状结构，例如，如果你正在跑一个分布式大数据工程，你可能需要创建一个trace。<br/>
Annotation：用来及时记录一个事件的存在，一些核心annotations用来定义一个请求的开始和结束 <br/>
cs - Client Sent -客户端发起一个请求，这个annotion描述了这个span的开始<br/>
sr - Server Received -服务端获得请求并准备开始处理它，如果将其sr减去cs时间戳便可得到网络延迟<br/>
ss - Server Sent -注解表明请求处理的完成(当请求返回客户端)，如果ss减去sr时间戳便可得到服务端需要的处理请求时间<br/>
cr - Client Received -表明span的结束，客户端成功接收到服务端的回复，如果cr减去cs时间戳便可得到客户端从服务端获取回复的所有所需时间 </p>

<h4 id="toc_1">追踪分类</h4>

<ol>
<li><p>Http协议,如RestTemplate,Feign,Okhttp3,HttpClient</p></li>
<li><p>Rpc远程调用,如Motan,Dubbo,GRPC</p></li>
<li><p>分布式Event,如RabbitMq,Kafka</p></li>
</ol>

<h3 id="toc_2">安装zipkin</h3>

<pre><code class="language-text">curl -sSL https://zipkin.io/quickstart.sh | bash -s
java -jar zipkin.jar &amp;
</code></pre>

<h4 id="toc_3">http链路追踪</h4>

<ul>
<li><p>引入依赖 </p>
<pre><code class="language-text">&lt;dependency&gt;
&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br/>
&lt;artifactId&gt;spring-cloud-starter-sleuth&lt;/artifactId&gt;<br/>
&lt;version&gt;${sleuth.version}&lt;/version&gt;<br/>
&lt;/dependency&gt;<br/>
&lt;!-- Sends trace data to zipkin over http (defaults to http://localhost:9411/api/v2/spans) --&gt;<br/>
&lt;dependency&gt;<br/>
&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br/>
&lt;artifactId&gt;spring-cloud-sleuth-zipkin&lt;/artifactId&gt;<br/>
&lt;version&gt;${zipkin.version}&lt;/version&gt;<br/>
&lt;/dependency&gt;
</code></pre></li>
<li><p>book-server和user-server的pom.yml添加配置</p>
<pre><code class="language-text">spring:
zipkin:<br/>
base-url: http://localhost:9411<br/>
sleuth:<br/>
enabled: true<br/>
sampler:<br/>
  probability: 1 #采样率,值为[0,1]之间的任意实数 1代表100%采集报告
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gateway 网关初探]]></title>
    <link href="https://purple-jimmy.github.io/jimmy_book/gateway%E7%BD%91%E5%85%B3%E5%88%9D%E6%8E%A2.html"/>
    <updated>2018-08-26T10:44:20+08:00</updated>
    <id>https://purple-jimmy.github.io/jimmy_book/gateway%E7%BD%91%E5%85%B3%E5%88%9D%E6%8E%A2.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>访问网关服务gateway-server 8080 路由到book-server服务</p>
</blockquote>

<ul>
<li><p>引入依赖</p>
<pre><code class="language-text">&lt;dependency&gt;
&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br/>
&lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;<br/>
&lt;/dependency&gt;
</code></pre></li>
<li><p>配置文件 gateway-server </p>
<pre><code class="language-text">spring:
cloud:<br/>
 gateway:<br/>
   routes:<br/>
   - id: host_route<br/>
     uri: http://localhost:1111<br/>
     predicates:<br/>
     - Path=/book/**<br/>
     filters:<br/>
     - StripPrefix=1<br/>
   - id: host_route<br/>
     uri: http://localhost:2222<br/>
     predicates:<br/>
     - Path=/user/**<br/>
     filters:<br/>
     - StripPrefix=1
</code></pre></li>
<li><p>访问 <a href="http://ip:port/book/queryBookA">http://ip:port/book/queryBookA</a></p></li>
</ul>

<blockquote>
<p>配置详解</p>

<ul>
<li>id:固定,不同 id 对应不同的功能</li>
<li>uri:目标服务地址</li>
<li>predicates:路由条件</li>
<li>filters:过滤规则</li>
</ul>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hystrix 服务降级]]></title>
    <link href="https://purple-jimmy.github.io/jimmy_book/hystrix%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7.html"/>
    <updated>2018-08-26T10:41:29+08:00</updated>
    <id>https://purple-jimmy.github.io/jimmy_book/hystrix%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>user-server 调用 book-server 的queryHystrixBook方法</p>
</blockquote>

<ul>
<li><p>引入依赖</p>
<pre><code class="language-text">&lt;dependency&gt;
&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br/>
&lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt;<br/>
&lt;/dependency&gt;
</code></pre></li>
<li><p>添加注解 user-server启动类添加:@EnableCircuitBreaker或者@EnableHystrix</p></li>
<li><p>@HystrixCommand 声明user-server调用book-server服务提供的方法queryHystrixBook失败后调用的方法</p></li>
</ul>

<pre><code class="language-text">@HystrixCommand(fallbackMethod = &quot;fallbackHystrix_a&quot;)
public String hystrix_a(){
    return restTemplate.getForObject(&quot;http://localhost:1111/queryHystrixBook&quot;, String.class);
}

public String fallbackHystrix_a() {
    return &quot;fallback hystrix a&quot;;
}
</code></pre>

<p>访问user-server提供的方法queryHystrixA,会调用book-server的queryHystrixBook方法.<br/><br/>
queryHystrixBook方法延迟10s返回结果,fallbackHystrix_a就会被触发</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hystrix 介绍]]></title>
    <link href="https://purple-jimmy.github.io/jimmy_book/hystrix%E4%BB%8B%E7%BB%8D.html"/>
    <updated>2018-08-26T10:38:42+08:00</updated>
    <id>https://purple-jimmy.github.io/jimmy_book/hystrix%E4%BB%8B%E7%BB%8D.html</id>
    <content type="html"><![CDATA[
<p>Hystrix具备了服务降级、服务熔断、线程隔离、请求缓存、请求合并以及服务监控等强大功能</p>

<ul>
<li><p>服务降级</p>
<pre><code class="language-text">在微服务架构中，我们将系统拆分成了一个个的服务单元，各单元应用间通过服务注册与订阅的方式互相依赖。由于每个单元都在不同的进程中运行，
依赖通过远程调用的方式执行，这样就有可能因为网络原因或是依赖服务自身问题出现调用故障或延迟，而这些问题会直接导致调用方的对外服务也出现延迟，<br/>
若此时调用方的请求不断增加，最后就会出现因等待出现故障的依赖方响应而形成任务积压，线程资源无法释放，最终导致自身服务的瘫痪，<br/>
进一步甚至出现故障的蔓延最终导致整个系统的瘫痪。如果这样的架构存在如此严重的隐患，那么相较传统架构就更加的不稳定。<br/>
为了解决这样的问题，因此产生了断路器等一系列的服务保护机制
</code></pre></li>
<li><p>依赖隔离</p>
<pre><code class="language-text">“舱壁模式”对于熟悉Docker的读者一定不陌生，Docker通过“舱壁模式”实现进程的隔离，使得容器与容器之间不会互相影响。
而Hystrix则使用该模式实现线程池的隔离，它会为每一个Hystrix命令创建一个独立的线程池，这样就算某个在Hystrix命令包装下的依赖服务出现延迟过高的情况，<br/>
也只是对该依赖服务的调用产生影响，而不会拖慢其他的服务。
</code></pre></li>
</ul>

<p>使用@HystrixCommand来将某个函数包装成了Hystrix命令,这里除了定义服务降级之外,Hystrix框架就会自动的为这个函数实现调用的隔离.<br/>
所以,依赖隔离、服务降级在使用时候都是一体化实现的,这样利用Hystrix来实现服务容错保护在编程模型上就非常方便的,并且考虑更为全面.</p>

<ul>
<li>断路器</li>
</ul>

<pre><code class="language-text">在分布式架构中，断路器模式的作用也是类似的，当某个服务单元发生故障（类似用电器发生短路）之后，通过断路器的故障监控（类似熔断保险丝），
直接切断原来的主逻辑调用。但是，在Hystrix中的断路器除了切断主逻辑的功能之外，还有更复杂的逻辑
</code></pre>

<p>在服务降级例子中,受限于Hystrix超时时间的问题,我们的调用依然很有可能产生堆积.<br/><br/>
这个时候断路器就会发挥作用,那么断路器是在什么情况下开始起作用呢?这里涉及到断路器的三个重要参数:快照时间窗、请求总数下限、错误百分比下限</p>

<ol>
<li>快照时间窗:断路器确定是否打开需要统计一些请求和错误数据,而统计的时间范围就是快照时间窗,默认为最近的10秒</li>
<li>请求总数下限:在快照时间窗内,必须满足请求总数下限才有资格根据熔断.默认为20,意味着在10秒内,如果该hystrix命令的调用此时不足20次,即时所有的请求都超时或其他原因失败,断路器都不会打开</li>
<li>错误百分比下限:当请求总数在快照时间窗内超过了下限,比如发生了30次调用,如果在这30次调用中,有16次发生了超时异常,也就是超过50%的错误百分比,在默认设定50%下限情况下,这时候就会将断路器打开</li>
</ol>

<pre><code class="language-text">那么当断路器打开之后会发生什么呢？我们先来说说断路器未打开之前，对于之前那个示例的情况就是每个请求都会在当hystrix超时之后返回fallback，
每个请求时间延迟就是近似hystrix的超时时间，如果设置为5秒，那么每个请求就都要延迟5秒才会返回。当熔断器在10秒内发现请求总数超过20，
并且错误百分比超过50%，这个时候熔断器打开。打开之后，再有请求调用的时候，将不会调用主逻辑，而是直接调用降级逻辑，这个时候就不会等待5秒之后才返回fallback。
通过断路器，实现了自动地发现错误并将降级逻辑切换为主逻辑，减少响应延迟的效果。

在断路器打开之后，处理逻辑并没有结束，我们的降级逻辑已经被成了主逻辑，那么原来的主逻辑要如何恢复呢？
对于这一问题，hystrix也为我们实现了自动恢复功能。当断路器打开，对主逻辑进行熔断之后，hystrix会启动一个休眠时间窗，在这个时间窗内，
降级逻辑是临时的成为主逻辑，当休眠时间窗到期，断路器将进入半开状态，释放一次请求到原来的主逻辑上，如果此次请求正常返回，
那么断路器将继续闭合，主逻辑恢复，如果这次请求依然有问题，断路器继续进入打开状态，休眠时间窗重新计时
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[feign]]></title>
    <link href="https://purple-jimmy.github.io/jimmy_book/feign%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.html"/>
    <updated>2018-08-26T10:35:33+08:00</updated>
    <id>https://purple-jimmy.github.io/jimmy_book/feign%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>user-server 调用 book-server</p>
</blockquote>

<ul>
<li><p>引入依赖</p>
<pre><code class="language-text">&lt;dependency&gt;
&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br/>
&lt;artifactId&gt;spring-cloud-starter-feign&lt;/artifactId&gt;<br/>
&lt;/dependency&gt;
</code></pre></li>
<li><p>添加注解 user-server启动类添加:@EnableFeignClients</p>
<pre><code class="language-text">@SpringBootApplication
@EnableDiscoveryClient<br/>
@RestController<br/>
@EnableFeignClients<br/>
public class UserServerStart {<br/>
public static void main(String[] args) {<br/>
    SpringApplication.run(UserServerStart.class,args);<br/>
}<br/>
}
</code></pre></li>
<li><p>配置文件 user-server和book-server分别向注册中心注册</p></li>
<li><p>user-server声明feign接口 book-server为book服务在注册中心的名字 queryBookFeign为book服务提供的调用方法</p>
<pre><code class="language-text">@FeignClient(&quot;book-server&quot;)
@Service<br/>
public interface BookServerFeign {<br/>
@GetMapping(&quot;/queryBookFeign&quot;)<br/>
String queryBookFeign();<br/>
}
</code></pre></li>
<li><p>user-server调用  </p>
<pre><code class="language-text">@RestController
public class FeignController {<br/>
@Autowired<br/>
BookServerFeign bookServerFeign;<br/>
@RequestMapping(&quot;/queryBook&quot;)<br/>
public void queryBook(){<br/>
    String str = bookServerFeign.queryBookFeign();<br/>
}<br/>
}
</code></pre></li>
</ul>

]]></content>
  </entry>
  
</feed>
